/*
	Include standard libraries
*/
#include <list>
#include <cmath>
#include <limits>
#include <string>

/*
	Include my headers	
*/
#include "vertex.h"
#include "triangle.h"
#include "tedge.h"
#include "triangulation.h"
#include "eventQueue.h"
#include "settings.h"

#ifndef __TRANSLATION_H_
#define __TRANSLATION_H_

/*
	Define the different types a translation can end with:
		FULL: 		The translation was fully executed
		REJECTED: 	The translation has even not been started because the result is
					not simple or the event queue is unstable
		PARTIAL: 	The translation has been started, but was aborted due to instability
					of the event queue
*/
enum class Executed {FULL, REJECTED, PARTIAL};

/*
	Define the different types of translations:
		DEFAULT: 		A default translation generated by some function outside of the
						translation class
		SPLIT_PART_1: 	The first part of a splitted translation
		SPLIT_PART_2: 	The second part of a splitted translation

*/
enum class TranslationType {DEFAULT, SPLIT_PART_1, SPLIT_PART_2};

class Translation{

private:
	
	/*
		The triangulation the vertex to be translated lives in
	*/
	Triangulation *T;

	/*
		The index of the vertex in the triangulation's vertex vector
	*/
	int index;

	/*
		The vertex to be translated, a copy at the start position and a copy at the
		target position
	*/
	Vertex *original;
	Vertex *oldV;
	Vertex *newV;

	/*
		The neighboring vertices in the polygon
	*/
	Vertex *prevV;
	Vertex *nextV;

	/*
		The path the vertex should move along
	*/
	TEdge *transPath;

	/*
		The actual edges between the vertex and its neighbors
	*/
	TEdge *prevOldE;
	TEdge *nextOldE;

	/*
		The new polygon edges the translation will produce
	*/
	TEdge *prevNewE;
	TEdge *nextNewE;

	/*
		The components of the translation vector
	*/
	double dx, dy;

	/*
		Indicates whether the translation must be split to be processed or can be processed
		directly
	*/
	bool split;

	/*
		The type of the translation
	*/
	TranslationType type;

	/*
		The event queue for this translation
	*/
	EventQueue *Q;

	/*
		The event time of the last processed event
	*/
	double actualTime;

	/*
		P ~ R ~ I ~ V ~ A ~ T ~ E 	M ~ E ~ M ~ B ~ E ~ R 	F ~ U ~ N ~ C ~ T ~ I ~ O ~ N ~ S
	*/
	Translation(Triangulation *Tr, int i, double dX, double dY, TranslationType tp);
	bool generateInitialQueue();

	bool insideQuadrilateral(Vertex *v);

	bool checkEdge(Vertex *fromV, TEdge *newE);

	void repairEnd();

	

public:
	Translation(Triangulation *Tr, int i, double dX, double dY);
	

	bool checkOverroll();

	enum Executed execute();

	bool flip(Triangle *t0, bool singleFlip);

	bool checkSimplicityOfTranslation();

	void checkSplit();

	~Translation();
};

#endif
