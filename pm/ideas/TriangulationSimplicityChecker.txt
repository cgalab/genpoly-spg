Conditions for the triangulation:
- must contain all polygon edges
- must contain the four edges of a rectangle enclosing the polygon without touching it
- no  other vertices than the polygon vertices and the four vertices of the rectangle

Types of edges:
- polygon edges called PE
- edges of the enclosing rectangle called RE
- other edges of the triangulation called TE

Initial triangulation:
- triangulate the initial (convex) polygon by zigzag
- generate the rectangle around
- triangulate the space between the rectangle and the polygon

simplicity_check():
- be C the vertex to translate, P its previous vertex in the polygon and N the next vertex
- be p the PE from P to C and n the PE from C to N
- be C' the translated vertex of C, p' the PE from P to C' and n' the PE from C' to N

- set p and n to TE
- get all triangles surrounding P into the list TP and all triangles surrounding N into the list TN
- get all edges of the triangles in TP not incident to P into list EP
- get all edges of the triangles in TN not incident to N into list EN

- check for intersection of p' with any edges ei of the set EP
- if no intersection: accept translation
- else:
	- take intersecting edge as e
	- while p' intersects with e
		- if e is PE or TE: reject translation
		- take other triangle T of e
		- check for intersection of p' with one of the other two edges of T
		- if no intersection: accept translation
		- else: take intersecting edge as e

- do the same with n' and EN
- if both accept, than accept the translation and repair_triangulation()
- otherwise reject the translation and set n and p to PE

repair_triangulation():
- delete vertex C and all edges incident to it
- delete all intersected edges
- insert C', p' and n' into the triangulation

- get edge e from P to N
- if e exists:
	- if C' is on the same side of e as C
		- get inner polygon IP on C's side of e
		- retriangulate IP
	- if C' is on the other side of e as C
		- remove e
		- get inner polygon IP1 on C's side of e
		- get inner polygon IP2 on the opposite side of e
		- retriangulate IP1 and IP2
- else:
	- get inner polygon IP1 on C's side of e
	- get inner polygon IP2 on the opposite side of e
	- retriangulate IP1 and IP2

How to get the inner polygons?
- use the property that each edge of these polygons is just connected to one triangle at the moment whereas all other PE and TE are connected to two triangles
- caution: RE of these polygons are at the moment connected to no triangle and also p' and n' may not be connected to any triangle if a retriangulation on both sides is necessary
- create a new list L
- start at the vertex P as V and insert P into the list
- get one of the adjacent vertices of V connected by an edge with a missing triangle (but not C')
- make this vertex to V and insert it into L
- while V is not N
 	- get the other adjacent vertex of V connected by an edge with a missing triangle
 	- caution: don't go back on accident!
 	- make this vertex to V and insert it into L
- insert C' into L
=> the hull of the inner polygon is now in L
 



