for n points:
- start with polygon of sqrt(n) points
- do maybe n random translations
- compute Voronoi diagram of edges
- insert sqrt(n) points into each edge
- for each edge:
	- do maybe n translation of points of the edge
	- additional translation condition: each point must stay in the Voronoi region of the edge
	=> intersections with edges of other Voronoi regions are avoided

number of intersection checks:
n: number of points
k: number of translations (maybe 10*sqrt(n))
m: number of tries per translation (maybe 2)

=> k*m*(2*sqrt(n)) + n(?) + sqrt(n)*2*k*m*sqrt(n)
=> O(n^1.5)
instead of O(nÂ²)
